buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}


plugins {
    id 'maven-publish'
}
apply plugin: 'maven'
apply plugin: 'net.minecraftforge.gradle.forge'
apply from: 'build.properties'

minecraft {
    runDir = "eclipse/"
}

project.version = getVersion()
project.ext.shortVersion = getShortVersion()

minecraft {
    replaceIn "Reference.java"
    replace "@VERSION@", project.shortVersion
    replace "@modid@", project.archivesBaseName
    replace "@MODNAME@", project.longname
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks["sourceJar"].classifier = 'sources'

tasks.build.dependsOn('deobfJar', 'sourceJar')

// Debug connection for development
tasks.runClient {
	args '--username=jayrol_rante2006@yahoo.com', '--password=poring745'
    jvmArgs += ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006"]
}
processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand project.properties
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
   	maven { url 'https://jitpack.io' }
}

artifacts {
    archives jar
    archives deobfJar
    archives sourceJar
}



publishing.publications {
     mavenJava(MavenPublication) {
       artifact jar
       artifact deobfJar
       artifact sourceJar
        }
}
 publishing.repositories {
        maven { url 'https://jitpack.io' }
    }



def getShortVersion() {
    def stdout = new ByteArrayOutputStream()
    exec {
        executable "git"
        args "rev-list", "--count", "HEAD"
        standardOutput = stdout
    }
    def revision = stdout.toString().trim()
    return "${major}.${minor}.${patch}.${revision}"
}

def getVersion() {
    return getShortVersion() + getArtifactID() + "+${minecraft.version}"
}

def getArtifactID() {
    def stdout = new ByteArrayOutputStream()
    exec {
        executable "git"
        args "rev-parse", "--abbrev-ref", "HEAD"
        standardOutput = stdout
    }
    def branch = stdout.toString().trim()
    if (branch == "HEAD") {
        stdout.reset()
        exec {
            executable "git"
            args "rev-parse", "--short", "HEAD"
            standardOutput = stdout
        }
        branch = stdout.toString().trim()
    }
    return "${branch == 'master' ? '' : '-' + branch.replace('/', '.')}"
}
